import numpy as np


def print_lut(lut: list, name=None, file=None):
    print("\n\n/* Autogenerated by ddc_lutgen.py */", file=file)
    if name:
        print("{} = {{ \\\\".format(name), file=file)
    else:
        print("{ \\", file=file)

    i = 0
    while i < len(lut):
        for j in range(i, min(i + 8, len(lut))):
            print(f"{lut[j]: 4d}u", end=', ', file=file)
        print("\\", file=file)
        i += 8
    
    if name:
        print("}}; /* {} */".format(name), file=file)
    else:
        print("};", file=file)


def gen_iqddc_lo(fa: float, fs: float = 4e6, lutlen: int = 400):
    """Generate lutlen samples of a unit cosine and sine with analog frequency fa sampled at fs.
    fa - analog frequency
    fs - sampling frequency
    lutlen - length of LUT/array of samples
    """
    n = np.arange(0, lutlen, 1)
    fd = fa / fs
    lo_i = 0.5 * np.cos(2 * np.pi * fd * n)
    lo_q = 0.5 * np.sin(2 * np.pi * fd * n)

    return lo_i, lo_q

def flt_to_q11(arr):
    """Convert an array of floats to a Qx.11 format. Inputs over the range [-1, 1) produce a fixed-point
    Q1.12 over [-4096, 4095)
    """
    return [round(val * 4096) for val in arr]

if __name__ == "__main__":
    lo_i, lo_q = gen_iqddc_lo(1e6, 5.333333e6, lutlen=200)
    lo_i = flt_to_q11(lo_i)
    lo_q = flt_to_q11(lo_q)

    with open("./out.txt", 'w') as fout:
        print_lut(lo_i, name="uint16_t i_lut[200]", file=fout)
        print_lut(lo_q, name="uint16_t q_lut[200]", file=fout)